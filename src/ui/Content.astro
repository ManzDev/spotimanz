---
import { cwd } from "node:process";
import { resolve } from "node:path";
import { Icon } from "astro-icon/components";
import BalloonButton from "@/components/BalloonButton.astro";
import songs from "@/data/musicdev.json";
import SongItem from "@/components/SongItem.astro";
import ColorThief from "colorthief";

const coverPlaylist = "/playlist/musicdev.webp";

const getDominantColor = async (imagePath) => {
  const coverPlaylistPath = resolve(cwd() + "/public" + imagePath.replace(".webp", ".jpg"));
  // const [r, g, b] = await ColorThief.getColor(coverPlaylistPath)
  const [r, g, b] = (await ColorThief.getPalette(coverPlaylistPath))[1];
  return `rgb(${r} ${g} ${b})`;
}

const dominantColor = await getDominantColor(coverPlaylist);
---

<style>
  .container {
    --dark-theme-color: color-mix(in srgb, var(--theme-color), #000 75%);

    display: grid;
    grid-template-rows: 400px 1fr;
    background: linear-gradient(to bottom, var(--theme-color), var(--dark-theme-color) 60%);
    height: 100%;
    border-radius: var(--border-radius);
  }

  header {
    display: flex;
    flex-direction: column;

    & .top {
      display: flex;
      padding: 1.25rem;

      & :is(nav, .main) {
        display: flex;
        gap: 0.5rem;
      }

      & .main {
        margin-left: auto;
      }
    }

    & .data {
      display: flex;
      gap: 0 2rem;
      padding: 1.5rem;

      & .cover {
        --size: 256px;

        width: var(--size);
        height: var(--size);
        border-radius: 6px;
        box-shadow:
          0 4px 10px #0008,
          0 0 20px #000a;
      }

      & .avatar {
        --size: 32px;

        width: var(--size);
        height: var(--size);
        background-image: url("/manzdev.png");
        background-size: cover;
        border-radius: 50%;
      }

      & .info {
        display: flex;
        flex-direction: column;
        justify-content: end;

        font-family: var(--default-font);

        & .row {
          display: flex;
          gap: 0.5rem;
          align-items: center;
        }

        & h1 {
          margin: 0;
          font-size: 5rem;
          font-weight: 800;
          letter-spacing: -4px;
        }

        & .total-duration {
          color: var(--dark-textcolor);
        }
      }
    }
  }

  .playlist {
    --translucid-color: color-mix(in srgb, var(--medium-bgcolor), transparent 65%);
    --playlist-format: 40px 1fr 0.7fr 0.4fr 0.1fr;

    display: flex;
    flex-direction: column;
    padding: 1.25rem;
    background: linear-gradient(
      to bottom,
      var(--translucid-color) 0 25%,
      var(--medium-bgcolor) 80% 100%
    );


    max-height: 36vh;
    overflow-y: scroll;

    & header {
      display: grid;
      grid-template-columns: var(--playlist-format);
      font-family: var(--default-font);
      font-weight: 500;
      font-size: 0.9rem;
      color: var(--dark-textcolor);

      & > div {
        padding: 0 0.5rem;
      }

      & + hr {
        width: 100%;
        border: 0;
        border-bottom: 1px solid var(--dark-textcolor);
        opacity: 0.25;
      }
    }
  }
</style>

<style define:vars={{ dominantColor }}>
  .container {
    --theme-color: var(--dominantColor);
  }
</style>

<div class="container">

  <header>
    <div class="top">
      <nav>
        <BalloonButton><Icon name="chevron-left" /></BalloonButton>
        <BalloonButton disabled><Icon name="chevron-right" /></BalloonButton>
      </nav>
      <div class="main">
        <BalloonButton class="large" href="https://music.manz.dev/">
          <Icon name="download" /> Visitar music.manz.dev
        </BalloonButton>
        <BalloonButton><Icon name="bell" /></BalloonButton>
        <BalloonButton class="avatar" href="https://manz.dev/"></BalloonButton>
      </div>
    </div>
    <div class="data">
      <img class="cover" src={coverPlaylist} alt="ManzDev">
      <div class="info">
        <strong>Lista</strong>
        <h1>MusicDev</h1>
        <div class="row">
          <div class="avatar"></div>
          <span class="info-subtitle">ManzDev · 15 canciones,</span>
          <span class="total-duration">1h 20 min aproximadamente</span>
        </div>
      </div>
    </div>
  </header>

  <div class="playlist">

    <header>
      <div class="cell">#</div>
      <div class="cell">Título</div>
      <div class="cell">Álbum</div>
      <div class="cell">Fecha en la que se añadió</div>
      <div class="cell"><Icon name="clock" /></div>
    </header>
    <hr>

    {songs.map((song, index) => <SongItem index={index} {...song} />)}

  </div>

</div>
