---
import songs from "@/data/musicdev.json";
import { Icon } from "astro-icon/components";

const PLAYLIST_NAME = "musicdev";

---

<style>
  .song-player-container {
    min-width: 700px;
    height: 100%;
    display: grid;
    grid-template-rows: 42px 24px;
    align-content: center;

    & .buttons {
      display: inline-grid;
      justify-items: center;
      align-items: center;
      grid-template-columns: repeat(2, 50px) 64px repeat(2, 50px);
      grid-template-rows: 1fr;
      margin: auto;

      & button {
        cursor: pointer;
        background: none;
        border: 0;
        font-size: 1rem;
      }

      & .circle {
        --size: 40px;

        width: var(--size);
        height: var(--size);
        background: #fff;
        border-radius: 50%;
        display: grid;
        place-items: center;
        color: #000;
      }
    }

    & .time-container {
      --time-size: 42px;

      display: grid;
      grid-template-columns: var(--time-size) 1fr var(--time-size);
      align-items: center;
      gap: 0 1rem;
      font-family: var(--default-font);
      font-size: 0.9rem;

      & .bar-container {
        --progress: 100%;

        background: #666;
        height: 5px;
        border-radius: 2px;
        overflow: hidden;

        & .bar {
          background: #fff;
          width: var(--progress);
          height: 100%;
        }
      }
    }
  }
</style>

<script type="module" define:vars={{ PLAYLIST_NAME, songs }}>

  function formatTime(seconds) {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;

      const formattedMinutes = String(minutes).padStart(2, '0');
      const formattedSeconds = String(remainingSeconds).padStart(2, '0');

      return `${formattedMinutes}:${formattedSeconds}`;
  }

  class MusicPlayer {
    songList = songs;
    shuffleEnabled = false;
    repeatEnabled = false;
    currentSongIndex = 0;
    currentSong = new Audio();
    currentVolume = 1;

    constructor() {
      const [currentTimeTag, durationTag] = document.querySelectorAll(".song-player-container time");
      this.durationTag = durationTag;
      this.prepare(0);

      this.currentSong.addEventListener("timeupdate", (ev) => {
        const time = formatTime(~~ev.target.currentTime);
        currentTimeTag.textContent = time;
      });
    }

    prepare(index) {
      this.currentSongIndex = index;
      this.currentSong.src = "/playlist/" + PLAYLIST_NAME + "/" + this.songList[this.currentSongIndex].slug + ".mp3";
      this.durationTag.textContent = this.songList[this.currentSongIndex].duration;
    }

    play() {
      if (this.currentSong.paused) {
        this.currentSong.play();
        this.sendInfo();
        console.log({ actualPlay: this.currentSongIndex });
      }
      else
        this.currentSong.pause();

      this.togglePlayPause();
      this.animatePlay();
    }

    togglePlayPause() {
      [...document.querySelectorAll(".buttons .play > div")]
        .forEach(div => div.toggleAttribute("hidden"));
    }

    animatePlay() {
      // const button = document.querySelector(".buttons .play");
      // const animation = button.animate([{ "scale": "1" }, { "scale": "1.2" }, { "scale": "1" }], 200);
    }

    next() {
      const index = (this.currentSongIndex + 1) % this.songList.length;
      console.log({ actual: this.currentSongIndex, nuevo: index });
      this.togglePlayPause();
      this.prepare(index);
      this.play();
    }

    prev() {
      const index = ((this.currentSongIndex - 1) <= 0) ? this.songList.length - 1 : this.currentSongIndex - 1;
      this.togglePlayPause();
      this.prepare(index);
      this.play();
    }

    sendInfo() {
      const data = { detail: this.songList[this.currentSongIndex], bubbles: true };
      const event = new CustomEvent("player:update-info", data);
      document.dispatchEvent(event);
    }

    toggleShuffle() {

    }

    toggleRepeat() {

    }
  }

  const musicPlayer = new MusicPlayer();

  const buttons = {
    play: document.querySelector(".buttons .play"),
    prev: document.querySelector(".buttons .prev"),
    next: document.querySelector(".buttons .next"),
    shuffle: document.querySelector(".buttons .shuffle")
  }

  buttons.play.addEventListener("click", () => musicPlayer.play());
  buttons.prev.addEventListener("click", () => musicPlayer.prev());
  buttons.next.addEventListener("click", () => musicPlayer.next());
  buttons.shuffle.addEventListener("click", () => {});

  document.addEventListener("player:play", ({ detail }) => {
    musicPlayer.prepare(detail);
    musicPlayer.play();
  });

</script>

<div class="song-player-container">
  <div class="buttons">
    <button class="shuffle"><Icon name="shuffle" /></button>
    <button class="prev"><Icon name="backward" /></button>
    <button class="play circle">
      <div class="play"><Icon name="play" /></div>
      <div class="pause" hidden><Icon name="pause" /></div>
    </button>
    <button class="next"><Icon name="forward" /></button>
    <button class="repeat"><Icon name="repeat" /></button>
  </div>
  <div class="time-container">
    <time>00:00</time>
    <div class="bar-container">
      <div class="bar"></div>
    </div>
    <time>00:00</time>
  </div>
</div>
