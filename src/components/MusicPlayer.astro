---

---

<script type="module">

  const PLAYLIST = "metaldev";

  function formatTime(seconds) {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;

      const formattedMinutes = String(minutes).padStart(2, '0');
      const formattedSeconds = String(remainingSeconds).padStart(2, '0');

      return `${formattedMinutes}:${formattedSeconds}`;
  }

  class MusicPlayer {
    songList = [];
    shuffleEnabled = false;
    repeatEnabled = false;
    currentSongIndex = 0;
    currentSong = new Audio();
    currentVolume = 1;

    constructor(songs) {
      const [currentTimeTag, durationTag] = document.querySelectorAll(".song-player-container time");
      this.durationTag = durationTag;
      this.songList = songs;
      this.prepare(0);

      this.currentSong.addEventListener("timeupdate", (ev) => {
        const time = formatTime(~~ev.target.currentTime);
        currentTimeTag.textContent = time;
      });

      const songPlaylist = document.querySelector(".song.playlist");
      songs.forEach((song, index) => {
        const attrs = Object.entries(song).map(([attr, value]) => `${attr}="${value}"`).join(" ");
        console.log(index, song);
        const element = `<song-item index="${index}" ${attrs}></song-item>`;
        songPlaylist.insertAdjacentHTML("beforeend", element);
      });

    }

    prepare(index) {
      this.currentSongIndex = index;
      const song = this.songList[this.currentSongIndex];
      this.currentSong.src = "/playlist/" + song.album.toLowerCase() + "/" + song.slug + ".mp3";
      this.durationTag.textContent = this.songList[this.currentSongIndex].duration;
    }

    play() {
      if (this.currentSong.paused) {
        this.currentSong.play();
        this.sendInfo();
        console.log({ actualPlay: this.currentSongIndex });
      }
      else
        this.currentSong.pause();

      this.togglePlayPause();
      this.animatePlay();
    }

    togglePlayPause(forcePause = false) {
      if (!forcePause) {
        [...document.querySelectorAll(".buttons .play > div")]
          .forEach(div => div.toggleAttribute("hidden"));
      } else {
        const [play, pause] = document.querySelectorAll(".buttons .play > div");
        play.setAttribute("hidden", "");
        pause.removeAttribute("hidden");
      }
    }

    animatePlay() {
      // const button = document.querySelector(".buttons .play");
      // const animation = button.animate([{ "scale": "1" }, { "scale": "1.2" }, { "scale": "1" }], 200);
    }

    next() {
      const index = (this.currentSongIndex + 1) % this.songList.length;
      console.log({ actual: this.currentSongIndex, nuevo: index });
      this.prepare(index);
      this.play();
      this.togglePlayPause(true);
    }

    prev() {
      const index = ((this.currentSongIndex - 1) <= 0) ? this.songList.length - 1 : this.currentSongIndex - 1;
      this.prepare(index);
      this.play();
      this.togglePlayPause(true);
    }

    sendInfo() {
      const data = { detail: this.songList[this.currentSongIndex], bubbles: true };
      const event = new CustomEvent("player:update-info", data);
      document.dispatchEvent(event);
    }

    toggleShuffle() {

    }

    toggleRepeat() {

    }
  }

  const songs = await fetch(`/playlist/${PLAYLIST}.json`).then(response => response.json());
  const musicPlayer = new MusicPlayer(songs);

  const buttons = {
    play: document.querySelector(".buttons .play"),
    prev: document.querySelector(".buttons .prev"),
    next: document.querySelector(".buttons .next"),
    shuffle: document.querySelector(".buttons .shuffle")
  }

  buttons.play.addEventListener("click", () => musicPlayer.play());
  buttons.prev.addEventListener("click", () => musicPlayer.prev());
  buttons.next.addEventListener("click", () => musicPlayer.next());
  buttons.shuffle.addEventListener("click", () => {});

  document.addEventListener("player:play", ({ detail }) => {
    musicPlayer.prepare(detail);
    musicPlayer.play();
    musicPlayer.togglePlayPause(true);
  });

</script>
